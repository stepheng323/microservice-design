services:
  user:
    env_file:
      - .env
      - apps/user/.env
    environment:
      NODE_ENV: production
    build:
      context: .
      dockerfile: ./apps/user/Dockerfile
      args:
        - SERVICE_NAME=user
    command: bash -c "node main.js --host 0.0.0.0"
    ports:
      - "4000:4000"
    depends_on:
      - user-db
      - redis
      - rabbitmq
    restart: always

  user-db:
    image: postgres:alpine
    env_file:
      - .env
      - apps/user/.env
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    volumes:
      - user-data:/var/lib/postgresql/data
    ports:
      - "5431:5432"

  product:
    env_file:
      - .env
      - apps/product/.env
    environment:
      NODE_ENV: production
    build:
      context: ./
      dockerfile: ./apps/product/Dockerfile
      args:
        - SERVICE_NAME=product
    command: bash -c "node main.js --host 0.0.0.0"
    ports:
      - "4001:4001"
    depends_on:
      - product-db
      - redis
      - rabbitmq
    restart: always

  product-db:
    image: mysql:latest
    env_file:
      - .env
      - apps/product/.env
    environment:
      MYSQL_DATABASE: ${PRODUCT_DB_NAME}
      MYSQL_USER: ${PRODUCT_DB_USER}
      MYSQL_PASSWORD: ${PRODUCT_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${PRODUCT_DB_PASSWORD}
    volumes:
      - product-data:/var/lib/mysql
    ports:
      - "3306:3306"

  order:
    env_file:
      - .env
      - apps/order/.env
    environment:
      NODE_ENV: production
    build:
      context: .
      dockerfile: ./apps/order/Dockerfile
      args:
        - SERVICE_NAME=order
    command: bash -c "node main.js --host 0.0.0.0"
    ports:
      - "4002:4002"
    depends_on:
      - order-db
      - redis
      - rabbitmq
    restart: always

  order-db:
    image: postgres:alpine
    env_file:
      - .env
      - apps/order/.env
    environment:
      POSTGRES_DB: ${ORDER_DB_NAME}
      POSTGRES_USER: ${ORDER_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_DB_PASSWORD}
    volumes:
      - order-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  migration:
    build:
      context: .
      dockerfile: Dockerfile.migration
      args:
        - SERVICE_NAME=migration
    command: >
      bash -c "
      echo 'Waiting for database...' &&
      sleep 10 &&
      npx nx run user:prisma-migrate --name=update &&
      npx nx run order:prisma-migrate --name=update &&
      npx nx run product:prisma-migrate --name=update &&
      echo 'Migration completed'
      "
    depends_on:
      - product-db
      - user-db
      - order-db

volumes:
  user-data:
  product-data:
  order-data:
  rabbitmq-data:
